// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interface/modbus/modbus.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modbus "github.com/tetragramaton/smh-go/internal/interface/modbus"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ReadFloat mocks base method.
func (m *MockClient) ReadFloat(param modbus.RegisterParam) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFloat", param)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFloat indicates an expected call of ReadFloat.
func (mr *MockClientMockRecorder) ReadFloat(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFloat", reflect.TypeOf((*MockClient)(nil).ReadFloat), param)
}

// ReadHoldingRegisters mocks base method.
func (m *MockClient) ReadHoldingRegisters(address, quantity uint16) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHoldingRegisters", address, quantity)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHoldingRegisters indicates an expected call of ReadHoldingRegisters.
func (mr *MockClientMockRecorder) ReadHoldingRegisters(address, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHoldingRegisters", reflect.TypeOf((*MockClient)(nil).ReadHoldingRegisters), address, quantity)
}

// ReadInputRegisters mocks base method.
func (m *MockClient) ReadInputRegisters(address, quantity uint16) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInputRegisters", address, quantity)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInputRegisters indicates an expected call of ReadInputRegisters.
func (mr *MockClientMockRecorder) ReadInputRegisters(address, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInputRegisters", reflect.TypeOf((*MockClient)(nil).ReadInputRegisters), address, quantity)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ReadHoldingRegisters mocks base method.
func (m *MockAPI) ReadHoldingRegisters(address, quantity uint16) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHoldingRegisters", address, quantity)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHoldingRegisters indicates an expected call of ReadHoldingRegisters.
func (mr *MockAPIMockRecorder) ReadHoldingRegisters(address, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHoldingRegisters", reflect.TypeOf((*MockAPI)(nil).ReadHoldingRegisters), address, quantity)
}

// ReadInputRegisters mocks base method.
func (m *MockAPI) ReadInputRegisters(address, quantity uint16) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInputRegisters", address, quantity)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInputRegisters indicates an expected call of ReadInputRegisters.
func (mr *MockAPIMockRecorder) ReadInputRegisters(address, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInputRegisters", reflect.TypeOf((*MockAPI)(nil).ReadInputRegisters), address, quantity)
}
