// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interface/mqtt/mqtt.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	mqtt "github.com/eclipse/paho.mqtt.golang"
	gomock "github.com/golang/mock/gomock"
	mqtt0 "github.com/tetragramaton/smh-go/internal/interface/mqtt"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close(quiesce uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", quiesce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(quiesce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), quiesce)
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect(quiesce uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect", quiesce)
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect(quiesce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), quiesce)
}

// IsConnectionOpen mocks base method.
func (m *MockClient) IsConnectionOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectionOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectionOpen indicates an expected call of IsConnectionOpen.
func (mr *MockClientMockRecorder) IsConnectionOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectionOpen", reflect.TypeOf((*MockClient)(nil).IsConnectionOpen))
}

// Publish mocks base method.
func (m *MockClient) Publish(topic string, qos byte, retained bool, payload interface{}) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, qos, retained, payload)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockClientMockRecorder) Publish(topic, qos, retained, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), topic, qos, retained, payload)
}

// PublishEvent mocks base method.
func (m *MockClient) PublishEvent(message mqtt0.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockClientMockRecorder) PublishEvent(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockClient)(nil).PublishEvent), message)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(topic string, qos byte, callback mqtt.MessageHandler) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, qos, callback)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(topic, qos, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), topic, qos, callback)
}

// SubscribeToTopic mocks base method.
func (m *MockClient) SubscribeToTopic(subscription mqtt0.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopic", subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTopic indicates an expected call of SubscribeToTopic.
func (mr *MockClientMockRecorder) SubscribeToTopic(subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopic", reflect.TypeOf((*MockClient)(nil).SubscribeToTopic), subscription)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockAPI) Disconnect(quiesce uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect", quiesce)
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockAPIMockRecorder) Disconnect(quiesce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockAPI)(nil).Disconnect), quiesce)
}

// IsConnectionOpen mocks base method.
func (m *MockAPI) IsConnectionOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectionOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectionOpen indicates an expected call of IsConnectionOpen.
func (mr *MockAPIMockRecorder) IsConnectionOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectionOpen", reflect.TypeOf((*MockAPI)(nil).IsConnectionOpen))
}

// Publish mocks base method.
func (m *MockAPI) Publish(topic string, qos byte, retained bool, payload interface{}) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, qos, retained, payload)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockAPIMockRecorder) Publish(topic, qos, retained, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAPI)(nil).Publish), topic, qos, retained, payload)
}

// Subscribe mocks base method.
func (m *MockAPI) Subscribe(topic string, qos byte, callback mqtt.MessageHandler) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, qos, callback)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockAPIMockRecorder) Subscribe(topic, qos, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAPI)(nil).Subscribe), topic, qos, callback)
}
